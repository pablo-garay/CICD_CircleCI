version: 2.1

orbs:
  python: circleci/python@2.0.3
  docker: circleci/docker@2.2.0

jobs:
  paas-command-on-container-executing-job:
    docker:
      - image: cimg/node:17.2.0 # the primary container, where your job's commands are run
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout # check out the code in the project directory
      - run: echo "Your commands have been executed in the Cloud" # run the `echo` command

  build_and_test: # this can be any name you choose
    parallelism: 4
    executor: python/default
    steps:
      - restore_cache:
          keys:
            - &source-cache2 source-v2-{{ .Branch }}-{{ .Revision }}
            - source-v2-{{ .Branch }}-
            - source-v2-

      - checkout

      - save_cache:
          key: *source-cache2
          paths:
            - ".git"
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run tests
          command: python -m pytest | circleci tests split --split-by=timings
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  deploy: # this can be any name you choose
    executor: docker/docker
    steps:
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          image: palenq/built-image
          registry: docker.io
          tag: prod 
      - docker/push:
          digest-path: /tmp/build-logs/digest.txt
          image: palenq/built-image
          registry: docker.io
          tag: prod
      - run:
          command: |
            echo "Digest is: $(</tmp/build-logs/digest.txt)"
      - store_artifacts:
          path: /tmp/build-logs/digest.txt
          destination: artifact-digest-file
      - store_artifacts:
          path: /tmp/build-logs
          destination: build-logs

workflows:
  cli-on-docker-workflow:
    jobs:
      - paas-command-on-container-executing-job

  python_app_on_container:
    when:
      or:
      - equal: [ main, << pipeline.git.branch >> ]
      - equal: [ staging, << pipeline.git.branch >> ]
    jobs:
      - build_and_test
      - deploy:
          requires:
            - build_and_test # only deploy if the build_and_test job has completed
          filters:
            branches:
              only: main # only deploy when on main
