version: 2.1

orbs:
  python: circleci/python@2.0.3
  docker: circleci/docker@2.2.0

jobs:
  paas-command-on-container-executing-job:
    docker:
      - image: cimg/node:17.2.0 # the primary container, where your job's commands are run
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout # check out the code in the project directory
      - run: echo "Your commands have been executed in the Cloud" # run the `echo` command

  build_and_test: # this can be any name you choose
    parallelism: 4
    executor: python/default
    steps:
      - restore_cache:
          keys:
            - &source-cache2 source-v2-{{ .Branch }}-{{ .Revision }}
            - source-v2-{{ .Branch }}-
            - source-v2-
            # **restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run**
            - &deps1-cache deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - checkout

      - save_cache: # source-code related cache
          name: Save source cache
          key: *source-cache2
          paths:
            - ".git"
      - python/install-packages:
          pkg-manager: pip
      - run: # install and activate virtual environment with pip
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache: # ** special step to save dependency cache **
          name: Save python virtual environment cache
          key: *deps1-cache
          paths:
            - "venv"
      - run:
          name: Run tests
          command: python -m pytest | circleci tests split --split-by=timings
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  deploy: # this can be any name you choose
    executor: docker/docker
    steps:
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          image: palenq/built-image
          registry: docker.io
          tag: prod 
      - docker/push:
          digest-path: /tmp/cicd-logs/digest.txt
          image: palenq/built-image
          registry: docker.io
          tag: prod
      - run:
          command: |
            echo "Digest is: $(</tmp/cicd-logs/digest.txt)"
            /opt/workspace_pagaray/chat_with_chatgpt.py > /tmp/cicd-logs/chatgpt_reponse.txt
      - store_artifacts:
          path: /tmp/cicd-logs/digest.txt
          destination: artifact-digest-file
      - store_artifacts:
          path: /tmp/cicd-logs
          destination: cicd-logs

workflows:
  cli-on-docker-workflow:
    jobs:
      - paas-command-on-container-executing-job

  python_app_on_container:
    when:
      or:
      - equal: [ main, << pipeline.git.branch >> ]
      - equal: [ staging, << pipeline.git.branch >> ]
    jobs:
      - build_and_test
      - deploy:
          requires:
            - build_and_test # only deploy if the build_and_test job has completed
          filters:
            branches:
              only: main # only deploy when on main
